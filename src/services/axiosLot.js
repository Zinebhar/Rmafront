// üìÅ src/services/axiosLot.js
import axios from 'axios';
import { getAuthToken, isTokenValid, clearAuthToken } from '../config/auth';

/**
 * Instance Axios configur√©e pour l'API des lots
 */
const api = axios.create({
  baseURL: 'http://localhost:9999/rest/api/lots',
  timeout: 1000000, // Timeout de 10 secondes
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

/**
 * Intercepteur de requ√™te pour ajouter automatiquement le token d'authentification
 */
api.interceptors.request.use(
  (config) => {
    const token = getAuthToken();
    
    if (token && isTokenValid(token)) {
      config.headers['Authorization'] = `Bearer ${token}`;
      console.log('üîë Token valide ajout√© √† la requ√™te (lots)');
    } else if (token) {
      console.warn('‚ö†Ô∏è Token expir√© d√©tect√© (lots) - Suppression du localStorage');
      clearAuthToken();
      // Note: Dans un vrai syst√®me, vous pourriez rediriger vers la page de login ici
    } else {
      console.warn('‚ö†Ô∏è Aucun token disponible pour la requ√™te (lots)');
    }
    
    // Assurer que Content-Type est d√©fini
    config.headers['Content-Type'] = 'application/json';
    
    console.log(`üåê Requ√™te ${config.method?.toUpperCase()} vers: ${config.url}`);
    
    return config;
  },
  (error) => {
    console.error('‚ùå Erreur dans l\'intercepteur de requ√™te (lots):', error);
    return Promise.reject(error);
  }
);

/**
 * Intercepteur de r√©ponse pour g√©rer les erreurs d'authentification
 */
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ R√©ponse re√ßue (lots): ${response.status}`);
    return response;
  },
  (error) => {
    if (error.response) {
      const { status, data } = error.response;
      
      switch (status) {
        case 401:
          console.error('üö´ Erreur d\'authentification (lots) - Token invalide ou expir√©');
          clearAuthToken();
          // Vous pourriez d√©clencher une redirection vers la page de login ici
          break;
        case 403:
          console.error('üö´ Acc√®s interdit (lots) - Permissions insuffisantes');
          break;
        case 404:
          console.error('üîç Ressource non trouv√©e (lots)');
          break;
        case 500:
          console.error('üí• Erreur serveur interne (lots)');
          break;
        default:
          console.error(`‚ùå Erreur HTTP ${status} (lots):`, data);
      }
    } else if (error.request) {
      console.error('üåê Erreur r√©seau (lots) - Pas de r√©ponse du serveur');
    } else {
      console.error('‚ùå Erreur lors de la configuration de la requ√™te (lots):', error.message);
    }
    
    return Promise.reject(error);
  }
);

/**
 * Fonctions utilitaires pour les op√©rations sur les lots
 */

/**
 * R√©cup√®re tous les lots
 * @param {object} params - Param√®tres de requ√™te (pagination, filtres, etc.)
 * @returns {Promise} Promesse r√©solue avec les donn√©es des lots
 */
export const getAllLots = async (params = {}) => {
  try {
    const response = await api.get('/', { params });
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des lots:', error);
    throw error;
  }
};

/**
 * R√©cup√®re un lot sp√©cifique par son ID
 * @param {string|number} lotId - ID du lot
 * @returns {Promise} Promesse r√©solue avec les donn√©es du lot
 */
export const getLotById = async (lotId) => {
  try {
    const response = await api.get(`/${lotId}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration du lot ${lotId}:`, error);
    throw error;
  }
};

/**
 * Cr√©e un nouveau lot
 * @param {object} lotData - Donn√©es du lot √† cr√©er
 * @returns {Promise} Promesse r√©solue avec les donn√©es du lot cr√©√©
 */
export const createLot = async (lotData) => {
  try {
    const response = await api.post('/', lotData);
    console.log('‚úÖ Lot cr√©√© avec succ√®s');
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du lot:', error);
    throw error;
  }
};
/**
 * R√©cup√®re les lots associ√©s √† un gestionnaire
 * @param {string} gestionnaire - Nom ou identifiant du gestionnaire
 * @returns {Promise} Liste des lots
 */
export const getLotsByGestionnaire = async (gestionnaire) => {
  try {
    const response = await api.get(`/by-gestionnaire/${gestionnaire}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration des lots du gestionnaire "${gestionnaire}":`, error);
    throw error;
  }
};

/**
 * Met √† jour un lot existant
 * @param {string|number} lotId - ID du lot √† mettre √† jour
 * @param {object} lotData - Nouvelles donn√©es du lot
 * @returns {Promise} Promesse r√©solue avec les donn√©es du lot mis √† jour
 */
export const updateLot = async (lotId, lotData) => {
  try {
    const response = await api.put(`/${lotId}`, lotData);
    console.log(`‚úÖ Lot ${lotId} mis √† jour avec succ√®s`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la mise √† jour du lot ${lotId}:`, error);
    throw error;
  }
};

/**
 * Supprime un lot
 * @param {string|number} lotId - ID du lot √† supprimer
 * @returns {Promise} Promesse r√©solue une fois le lot supprim√©
 */
export const deleteLot = async (lotId) => {
  try {
    await api.delete(`/${lotId}`);
    console.log(`‚úÖ Lot ${lotId} supprim√© avec succ√®s`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la suppression du lot ${lotId}:`, error);
    throw error;
  }
};

// Export de l'instance axios par d√©faut pour des utilisations personnalis√©es
export default api;